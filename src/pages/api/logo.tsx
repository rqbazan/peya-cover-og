import { ImageResponse } from '@vercel/og'
import { NextRequest } from 'next/server'

export const config = {
  runtime: 'edge',
}

const fontPromise = fetch(
  new URL(`../../assets/Lato-Bold.ttf`, import.meta.url),
).then(res => res.arrayBuffer())

export default async function handler(req: NextRequest) {
  try {
    const font = await fontPromise

    const url = new URL(req.url)

    const undertext = url.searchParams.get('undertext')
    const fontSize = url.searchParams.get('fontSize') ?? 14.5

    return new ImageResponse(
      (
        <div
          style={{
            height: '100%',
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            fontFamily: 'Lato',
          }}
        >
          <div tw="flex">
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width={175}
              height={40}
              fill="none"
            >
              <path
                fill="#F52F41"
                d="M103.875 10.726c-1.5 0-2.625 1.135-2.625 2.776 0 1.261.75 2.018 2.125 2.018 1.5 0 2.625-1.135 2.625-2.775 0-1.262-.875-2.02-2.125-2.02ZM99.25 11.357c0-.127-.125-.127-.25-.127h-3.25c-.125 0-.25.127-.25.253 0 0-1.25 6.435-1.375 6.814-.875-1.515-2.5-2.398-4.5-2.398-4 0-6.875 3.28-6.875 7.823 0 3.66 2.25 6.183 5.5 6.183 1.625 0 3-.63 4-1.766-.125.378-.125.63-.25 1.01 0 .125 0 .125.125.252 0 .126.125.126.25.126h3.25c.125 0 .25-.126.25-.253l3.5-17.665c-.125-.126-.125-.126-.125-.252Zm-6.375 11.608c-.125.505-.25.884-.5 1.262-.25.379-.5.757-.75 1.01-.25.252-.625.504-1 .63-.75.253-1.625.38-2.25 0-.25-.126-.625-.252-.75-.504-.25-.253-.375-.505-.5-.883C87 24.1 87 23.722 87 23.344c0-.505.125-1.01.375-1.514.25-.505.5-.884.75-1.262.375-.379.75-.631 1.125-.757.375-.253.875-.253 1.375-.253.375 0 .75.127 1.125.253s.625.378.875.63c.25.253.375.632.5 1.01-.25.505-.25 1.01-.25 1.514ZM104.375 17.413H101c-.125 0-.25.126-.25.253L98.5 29.274c0 .127 0 .127.125.253 0 0 .125.126.25.126h3.375c.125 0 .25-.126.25-.252l2.25-11.61c0-.125 0-.125-.125-.252-.125-.126-.125-.126-.25-.126ZM54.75 28.391c.375-1.514 1-5.047 1-5.173h4c4.625 0 7.5-2.524 7.5-6.436 0-3.533-2.375-5.552-6.375-5.552H54c-.125 0-.25.127-.25.253l-3.5 17.54c0 .125 0 .125.125.251 0 .127.125.127.25.127h3.125c-.125 0 .75 0 1-1.01Zm5.125-8.833H56.5c0-.126.875-4.416.875-4.542H60.5c1.5 0 2.375.757 2.375 2.019 0 1.64-1.125 2.523-3 2.523ZM129.625 15.9c-4.5 0-7.75 3.28-7.75 7.696 0 3.786 2.625 6.31 6.625 6.31 4.5 0 7.75-3.281 7.75-7.698 0-3.785-2.625-6.309-6.625-6.309Zm-.875 10.094c-1.75 0-2.75-1.01-2.75-2.524 0-2.019 1.375-3.533 3.375-3.533 1.75 0 2.75 1.01 2.75 2.524 0 2.019-1.375 3.533-3.375 3.533ZM122.375 11.357c0-.127-.125-.127-.25-.127h-3.25c-.125 0-.25.127-.25.253 0 0-1.25 6.435-1.375 6.814-.875-1.515-2.5-2.398-4.5-2.398-4 0-6.875 3.28-6.875 7.823 0 3.66 2.25 6.183 5.5 6.183 1.625 0 3-.63 4-1.766-.125.378-.125.63-.25 1.01 0 .125 0 .125.125.252 0 .126.125.126.25.126h3.25c.125 0 .25-.126.25-.253l3.5-17.665c0-.126 0-.126-.125-.252Zm-6.25 11.608c-.125.505-.25.884-.5 1.262-.25.379-.5.757-.75 1.01-.25.252-.625.504-1 .63-.75.253-1.625.38-2.25 0-.25-.126-.625-.252-.75-.504-.25-.253-.375-.505-.5-.883-.125-.38-.125-.758-.125-1.136 0-.505.125-1.01.375-1.514.25-.505.5-.884.75-1.262.375-.379.75-.631 1.125-.757.375-.253.875-.253 1.375-.253.375 0 .75.127 1.125.253s.625.378.875.63c.25.253.375.632.5 1.01-.125.505-.125 1.01-.25 1.514ZM147.125 16.909c-1.75-.758-3.5-1.136-5.125-1.01-2.875.252-4.5 2.019-4.25 4.417.125 1.514 1 2.65 2.625 3.533l1.75 1.009c.75.379.75.631.875.757 0 .505-.625.631-.875.757-1.125.126-2.5-.378-4-1.262h-.25c-.125 0-.125.127-.125.127l-1.5 2.523c-.125.126 0 .253.125.379 1.75 1.262 3.875 1.766 6 1.64 3.125-.252 4.875-2.019 4.625-4.669-.125-1.64-.875-2.65-2.625-3.533l-1.625-.883c-1-.505-1-.63-1-.883 0-.127 0-.505.875-.631s2.125.252 3.25.757h.25c.125 0 .125-.126.125-.126l1.125-2.65-.25-.253ZM165 11.735c0-.126-.125-.126-.25-.126H160c-.125 0-.25 0-.25.126 0 0-4.625 6.688-5 7.319-.125-.631-2.375-7.193-2.375-7.193 0-.126-.125-.252-.25-.252H148c-.125 0-.25 0-.25.126s-.125.252 0 .252l4.375 11.104-1.25 6.436c0 .126 0 .252.125.252 0 .126.125.126.25.126h3.25c.375 0 .75-.252.875-.757l1.125-5.93 8.5-11.104c0-.127.125-.253 0-.379Z"
              />
              <path
                fill="#F52F41"
                d="M174.875 16.782c0-.126-.125-.126-.25-.126h-3.25c-.125 0-.25.126-.25.253 0 0-.125.63-.25 1.009-.75-.883-1.875-1.388-3-1.514-1-.126-2 .126-3 .505-3.125 1.261-5.25 4.416-5.25 7.823 0 3.028 2 5.047 4.875 5.173 1.625.127 3-.378 4.25-1.514-.125.379-.125.757-.25 1.01 0 .126 0 .126.125.252 0 .126.125.126.25.126h3.25c.125 0 .25-.126.25-.252l2.5-12.492c.125-.127.125-.127 0-.253ZM170 23.218c-.125.504-.25.883-.375 1.262-.25.378-.5.757-.75 1.009a2.72 2.72 0 0 1-1 .63c-.75.253-1.5.253-2.25 0-.25-.125-.5-.252-.75-.504s-.375-.505-.5-.883c-.125-.379-.125-.757-.125-1.136 0-.505.125-1.01.375-1.388.125-.378.375-.883.75-1.135.25-.379.625-.631 1.125-.758.375-.252.875-.252 1.25-.252s.75.126 1.125.253c.375.126.625.378.75.63.25.253.375.631.375 1.01v1.262ZM75.125 15.9c-4.375 0-7.625 3.28-7.625 7.696 0 3.912 2.625 6.183 6.75 6.183 1.875 0 3.375-.505 5-1.64.125-.126.125-.253 0-.379l-2-2.145c-.125-.126-.25-.126-.375 0-.875.505-1.75.631-2.625.631-1.875 0-3-.883-3-2.397h9.25c.125 0 .25-.127.25-.253.25-1.01.375-1.64.375-2.397 0-3.155-2.375-5.3-6-5.3Zm-3.5 5.173C72.25 19.558 73.375 18.8 75 18.8s2.5.757 2.5 2.272h-5.875ZM27.25 0H.75C.25 0 0 .379 0 .757V4.67c0 4.164 3 6.435 8.25 6.435h19c2 0 3.625 1.64 3.625 3.66 0 2.018-1.625 3.659-3.625 3.659H6c-.25 0-.625.252-.625.504l-5 20.19c0 .252 0 .378.125.63.125.127.375.253.5.253h6.75c2.5 0 3.75-2.145 4-3.28l2-7.32h13.5c8 0 14.5-6.56 14.5-14.637C41.875 6.688 35.375 0 27.25 0Z"
              />
            </svg>
          </div>
          <div tw="flex justify-center mt-[4px]">
            <span
              tw="text-black font-bold h-4"
              style={{ fontSize: Number(fontSize) }}
            >
              {undertext}
            </span>
          </div>
        </div>
      ),
      {
        width: 175,
        height: 62,
        fonts: [
          {
            name: 'Lato',
            data: font,
            weight: 700,
            style: 'normal',
          },
        ],
      },
    )
  } catch (e: any) {
    console.log(e)
    return new Response(`Failed to generate the image`, {
      status: 500,
    })
  }
}
